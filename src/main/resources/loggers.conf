
//Настройки чисто приложения
justin {

  bd {
    uri = "jdbc:postgresql://localhost:5432/callalign?user=postgres&password=artemcom"
  }

  timers{

    //Время через которое пинг будет считаться неудачным
    ping= 1 seconds

    //Время жизни пакета четвёртого типа. Время которое даётся клиент.
    pkgTimeToLive= 240 seconds

    //Время через которое интент сможет снова попасть в обработку, если он уже был выбран для звонка
    delayIStatusReturn= 40 seconds

    //максимальное время сколько интент может ждать ответа на готовность от актёров Юзеров участников. Является скорее системным и не требует настройки
    delayIPsStop= 1 minutes

    //задержка через которую после дропа конекта измениться статус на 0
    delayUserStatusTo0= 1 minutes

    // Системная $ сколько Одному ЮзерАктору ждать ответа на запрос разрешения звонить от Другого ЮзерАктора
    delayUserToUserCallRQ=8 seconds


    //Указывает через какое время юзер снова станет доступным если тот кто пытался ему позвонить не дозвонится.
    // Если адресат звонка ответил инициатору [5] что можно звонить, или инициатору интента отправилось уведомление о возможности звонка,
    //то адресат становиться недоступным для других событий звонка или интента.
    //Важно если инициатор ответи 0 а адресат 1, то адресат будет недоступным для событий в течении этого времени
    delayUserRollBackFree=15 seconds

    //Сколько ждать после старта сервера чтобы запустить интенткалькулятор
    delayIntentCalculatorStart=20 seconds

    //Периодичность с которой будет запускаться интент калькулятор
    periodicityIntentCalculatorStart=20 seconds
  }



}


//Акковские настройки
akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "debug"
//  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG


  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
//  stdout-loglevel = "debug"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  # logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
    }
  }



}

